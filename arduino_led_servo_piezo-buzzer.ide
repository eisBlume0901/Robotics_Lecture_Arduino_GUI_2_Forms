#include <Servo.h>
Servo servo;
int servoPin = 9;

int redLED = 3;
int yellowLED = 5;
int greenLED = 6;

int buzzPin = 10;

#define C4 262
#define CS4 277
#define D4 294
#define DS4 311
#define E4 330
#define F4 349
#define FS4 370
#define G4 392
#define GS4 415
#define A4 440
#define AS4 466
#define B4 494
#define C5 523
#define CS5 554
#define D5 587
#define DS5 622
#define E5 659
#define F5 698
#define FS5 740
#define G5 784
#define GS5 831
#define A5 880
#define AS5 932
#define B5 988
#define C6 1047

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  servo.attach(servoPin);

  pinMode(redLED, OUTPUT);
  pinMode(yellowLED, OUTPUT);
  pinMode(greenLED, OUTPUT);

  pinMode(buzzPin, OUTPUT);
}

void loop() {
  // put your main code here, to run repeatedly:

  if (Serial.available() > 0) {
    String data = Serial.readString();

   if (data.startsWith("ROn")) {
      analogWrite(redLED, 255);
    }
    if (data.startsWith("ROff")) {
      analogWrite(redLED, 0);
    }

    if (data.startsWith("YOn")) {
      analogWrite(yellowLED, 255);
    }
    if (data.startsWith("YOff")) {
      analogWrite(yellowLED, 0);
    }

    if (data.startsWith("GOn")) {
      analogWrite(greenLED, 255);
    }
    if (data.startsWith("GOff")) {
      analogWrite(greenLED, 0);
    }

    if (data.startsWith("S0")) {
      servo.write(0);
    }

    if (data.startsWith("S45")) {
      servo.write(45);
    }

    if (data.startsWith("S90")) {
      servo.write(90);
    }

    if (data.startsWith("S180")) {
      servo.write(180);
    }

    if (data.startsWith("Birthday")) {
      Serial.print("Birthday");
      birthday();
    }

    if (data.startsWith("Sheep")) {
      sheep();
    }

    if (data.startsWith("Twinkle")) {
      twinkle();
    }
  }
}

void birthday() {
  int std = 60000 / 300 * 8;
  int duration = 1550;
  int dot = 1.50;
  int melody[] = {
    G4, G4, A4, G4, C5, B4,
    G4, G4, A4, G4, D5, C5,
    G4, G4, G5, E5, C5, C5, B4, A4,
    F5, F5, E5, C5, D5, C5
  };

   int noteDenomination[] = {
    5, 16, 4, 4, 4, 2,
    5, 16, 4, 4, 4, 2,
    5, 16, 4, 4, 8, 8, 4, 4,
    5, 16, 4, 4, 4, 2
  };


  int size = sizeof(melody) / sizeof(melody[0]);

    for (int i = 0; i < size; i++) {
    int noteDuration = duration / noteDenomination[i];
    tone(buzzPin, melody[i], noteDuration);    
    delay(noteDuration);
    noTone(buzzPin);
  }
}

void twinkle() {
  int std = 60000 / 300 * 8;
  int duration = 1550;
  int dot = 1.50;
  int melody[] = {
    C4, C4, G4, G4, A4, A4, G4,
    F4, F4, E4, E4, D4, D4, C4,
    G4, G4, F4, F4, E4, E4, D4,
    G4, G4, F4, F4, E4, E4, D4,
    C4, C4, G4, G4, A4, A4, G4,
    F4, F4, E4, E4, D4, D4, C4
  };

   int noteDenomination[] = {
    4,4,4,4,4,4,2,
    4,4,4,4,4,4,2,
    4,4,4,4,4,4,2,
    4,4,4,4,4,4,2,
    4,4,4,4,4,4,2,
    4,4,4,4,4,4,2
  };


  int size = sizeof(melody) / sizeof(melody[0]);

    for (int i = 0; i < size; i++) {
    int noteDuration = duration / noteDenomination[i];
    tone(buzzPin, melody[i], noteDuration);    
    delay(noteDuration);
    noTone(buzzPin);
  }
}

void sheep() {
  int std = 60000 / 300 * 8;
  int duration = 1550;
  int dot = 1.50;
  int melody[] = {
    C4, C4, G4, G4, A4, B4, C5, A4, G4,
    F4, F4, E4, E4, D4, E4, F4, D4, C4
  };

   int noteDenomination[] = {
    4,4,4,4,8,8,8,8,2,
    4,4,4,4,8,8,8,8,2
  };


  int size = sizeof(melody) / sizeof(melody[0]);

    for (int i = 0; i < size; i++) {
    int noteDuration = duration / noteDenomination[i];
    tone(buzzPin, melody[i], noteDuration);    
    delay(noteDuration);
    noTone(buzzPin);
  }
}
